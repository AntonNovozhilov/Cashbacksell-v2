import asyncio
import re
from collections import defaultdict
from aiogram import Router, F, types
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from database.models import async_session, ChatPrivatUser

from config import CHAT_ID, admin
from database.requests import chat_privat
from keyboards.inline_kb import finish_kb
from keyboards.kb_user import user_kb

cachbackpost = Router()

media_group_buffer = defaultdict(list)

def contains_emoji(text: str):
    emoji_pattern = re.compile("[\U00010000-\U0010ffff]", flags=re.UNICODE)
    return bool(emoji_pattern.search(text))

class PostCachback(StatesGroup):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–µ—à–±–µ–∫–µ."""

    title = State()
    market = State()
    price_before = State()
    price_after = State()
    discount = State()
    seller = State()
    photo = State()

@cachbackpost.callback_query(F.data == 'create_cash')
async def start_post(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(PostCachback.title)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=types.ReplyKeyboardRemove())
    await callback.answer()

@cachbackpost.message(PostCachback.title)
async def post_market(message: types.Message, state: FSMContext):
    if contains_emoji(message.text):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.')
        return
    await state.update_data(title=message.text)
    await state.set_state(PostCachback.market)
    await message.answer('–ù–∞ –∫–∞–∫–æ–π –ø–ª–æ—â–∞–¥–∫–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è —Ç–æ–≤–∞—Ä?')

@cachbackpost.message(PostCachback.market)
async def post_price(message: types.Message, state: FSMContext):
    if contains_emoji(message.text):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.')
        return
    await state.update_data(market=message.text)
    await state.set_state(PostCachback.price_before)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –≤ —Ä—É–±–ª—è—Ö:')

@cachbackpost.message(PostCachback.price_before)
async def post_price_before(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1490):')
        return
    if contains_emoji(message.text):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.')
        return
    
    await state.update_data(price_before=message.text)
    await state.set_state(PostCachback.price_after)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ —Å —É—á–µ—Ç–æ–º –∫–µ—à–±–µ–∫–∞:')

@cachbackpost.message(PostCachback.price_after)
async def post_price_after(message: types.Message, state: FSMContext):
    if contains_emoji(message.text):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.')
        return
    data = await state.get_data()
    if not message.text.isdigit():
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000):')
        return
    new_price = int(message.text)
    old_price = int(data.get('price_before', 0))
    if new_price >= old_price:
        await message.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –∫–µ—à–±–µ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ –∫–µ—à–±–µ–∫–∞.')
        return
    await state.update_data(price_after=message.text)
    await state.set_state(PostCachback.discount)
    await message.answer('–ö–∞–∫–∞—è —Å–∫–∏–¥–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö?')

@cachbackpost.message(PostCachback.discount)
async def post_cashback(message: types.Message, state: FSMContext):
    if contains_emoji(message.text):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.')
        return
    if not message.text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–µ—à–±—ç–∫ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 300 –∏–ª–∏ 10):")
            return
    cashback_value = int(message.text)
    cashback_type = "‚ÇΩ" if cashback_value > 100 else "%"
    await state.update_data(discount=cashback_value, cashback_type=cashback_type)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:")
    await state.set_state(PostCachback.seller)

@cachbackpost.message(PostCachback.seller)
async def post_seller(message: types.Message, state: FSMContext):
    if contains_emoji(message.text):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–∞–π–ª–∏–∫–∏, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.')
        return
    await state.update_data(seller=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ –ø–æ—Å—Ç—É:")
    await state.set_state(PostCachback.photo)

@cachbackpost.message(PostCachback.photo, ~F.photo)
async def wrong_input_in_photo(message: types.Message):
    await message.answer("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ *—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é* —Ç–æ–≤–∞—Ä–∞.\n"
                         "–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è üìé –∏ –≤—ã–±—Ä–∞–≤ *–§–æ—Ç–æ*.\n")


@cachbackpost.message(PostCachback.photo, F.photo)
async def post_photo(message: types.Message, state: FSMContext):
    if message.media_group_id:
        media_group_buffer[message.media_group_id].append(message.photo[-1].file_id)

        if len(media_group_buffer[message.media_group_id]) == 1:
            await asyncio.sleep(1.5)
            photo_ids = media_group_buffer.pop(message.media_group_id)
            data = await state.get_data()
            photos = data.get("photos", [])
            photos.extend(photo_ids)
            await state.update_data(photos=photos)

            await message.answer(
                "üñº –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–∞–ª–µ–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                reply_markup=finish_kb()
            )

    else:
        data = await state.get_data()
        photos = data.get("photos", [])
        photos.append(message.photo[-1].file_id)
        await state.update_data(photos=photos)

        await message.answer(
            "üñº –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–∞–ª–µ–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            reply_markup=finish_kb()
        )

@cachbackpost.callback_query(F.data == "finish_post")
async def handle_finish(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    photos = data.get("photos", [])

    if not photos:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
        return

    price = int(data["price_before"])
    cashback = data["discount"]

    text = (
        f"<i><b>{data['title']}</b></i> \n"
        f"<i>{data['market']}</i> \n\n"
        f"<b>–¶–µ–Ω–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ:</b> {data['price_before']}‚ÇΩ ‚ùå \n"
        f"<b>–¶–µ–Ω–∞ –¥–ª—è –í–∞—Å:</b> {data['price_after']}‚ÇΩ ‚úÖ \n"
        f"<i>(–ö–µ—à–±–µ–∫ - {data['discount']}{data['cashback_type']}üî•)</i> \n\n"
        f"üñäÔ∏è <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤—ã–∫—É–ø—É –ø–∏—à–∏</b> <i>{data['seller']}</i>"
    )
    user_id = callback.from_user.id
    username = callback.from_user.username or ''
    first_name = callback.from_user.first_name or ''
    user_id = callback.from_user.id
    chat = await chat_privat(user_id)
    if user_id not in chat:
        topic_title = f'{username}|{first_name}'
        new_topic = await callback.bot.create_forum_topic(chat_id=CHAT_ID, name=topic_title)
        thread_id = new_topic.message_thread_id
        await callback.bot.send_message(chat_id=CHAT_ID, text=f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (id: {user_id})", message_thread_id=thread_id)

    async with async_session() as session:
            chat_user = await session.scalar(select(ChatPrivatUser).where(ChatPrivatUser.user_id == user_id))
            thread_id = chat_user.thread_id if chat_user else None
    media_group = [types.InputMediaPhoto(media=file_id) for file_id in photos]
    await callback.bot.send_media_group(chat_id=CHAT_ID, media=media_group, message_thread_id=thread_id)

    buttons = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ü–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç", callback_data=f"approve_{user_id}")],
        [types.InlineKeyboardButton(text="‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω", callback_data=f"reject_{user_id}")]
    ])
    await callback.bot.send_message(chat_id=CHAT_ID, text=text, message_thread_id=thread_id, reply_markup=buttons, parse_mode='HTML')
    await state.clear()
    await callback.message.answer("–ì–æ—Ç–æ–≤–æ! –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.", reply_markup=user_kb(callback.from_user.id))


@cachbackpost.callback_query(F.data.startswith("approve_"))
async def approve_post(callback: types.CallbackQuery):
    if callback.from_user.id not in admin:
        return
    user_id = int(callback.data.split("_")[1])
    try:
        await callback.bot.send_message(chat_id=user_id, text="‚úÖ –í–∞—à –ø–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å.")
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

@cachbackpost.callback_query(F.data.startswith("reject_"))
async def reject_post(callback: types.CallbackQuery):
    if callback.from_user.id not in admin:
        return
    user_id = int(callback.data.split("_")[1])
    try:
        await callback.bot.send_message(chat_id=user_id, text="‚ùå –í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")