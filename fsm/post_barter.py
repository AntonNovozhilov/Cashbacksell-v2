import asyncio
import re
from collections import defaultdict
from aiogram import Router, F, types
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from database.models import async_session, ChatPrivatUser

from config import CHAT_ID, admin
from database.requests import chat_privat
from keyboards.inline_kb import finish_kb, finish_kb2
from keyboards.kb_user import user_kb

barterpost = Router()

media_group_bufferbarter = defaultdict(list)

class PostBarter(StatesGroup):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ –±–∞—Ä—Ç–µ—Ä–µ."""

    title = State()
    money = State()
    web = State()
    ohwats = State()
    tematic = State()
    descriptions = State()
    seller = State()
    photo = State()

def barter_money_kb():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–° –¥–æ–ø–ª–∞—Ç–æ–π", callback_data="money_yes")],
        [types.InlineKeyboardButton(text="–ë–µ–∑ –¥–æ–ø–ª–∞—Ç—ã", callback_data="money_no")]
    ])

@barterpost.callback_query(F.data == 'create_barter')
async def start_post(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(PostBarter.title)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=types.ReplyKeyboardRemove())
    await callback.answer()

@barterpost.message(PostBarter.title)
async def start_post2(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(PostBarter.money)
    await message.answer("–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –±–∞—Ä—Ç–µ—Ä —Å –¥–æ–ø–ª–∞—Ç–æ–π –∏–ª–∏ –±–µ–∑?", reply_markup=barter_money_kb())

@barterpost.callback_query(F.data.startswith("money_"))
async def set_money(callback: types.CallbackQuery, state: FSMContext):
    money_value = "–° –¥–æ–ø–ª–∞—Ç–æ–π" if callback.data == "money_yes" else "–ë–µ–∑ –¥–æ–ø–ª–∞—Ç—ã"
    await state.update_data(money=money_value)
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Å–æ—Ü—Å–µ—Ç–∏ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    await state.set_state(PostBarter.web)

@barterpost.message(PostBarter.web)
async def set_web(message: types.Message, state: FSMContext):
    await state.update_data(web=message.text)
    await message.answer("–ö–∞–∫–∏–µ –æ—Ö–≤–∞—Ç—ã?")
    await state.set_state(PostBarter.ohwats)

@barterpost.message(PostBarter.ohwats)
async def set_ohwats(message: types.Message, state: FSMContext):
    await state.update_data(ohwats=message.text)
    await message.answer("–¢–µ–º–∞—Ç–∏–∫–∞ –±–ª–æ–≥–∞?")
    await state.set_state(PostBarter.tematic)

@barterpost.message(PostBarter.tematic)
async def set_thematic(message: types.Message, state: FSMContext):
    await state.update_data(tematic=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:")
    await state.set_state(PostBarter.descriptions)

@barterpost.message(PostBarter.descriptions)
async def set_description(message: types.Message, state: FSMContext):
    await state.update_data(descriptions=message.text)
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:")
    await state.set_state(PostBarter.seller)

@barterpost.message(PostBarter.seller)
async def set_seller(message: types.Message, state: FSMContext):
    await state.update_data(seller=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ –ø–æ—Å—Ç—É:")
    await state.set_state(PostBarter.photo)

@barterpost.message(PostBarter.photo, ~F.photo)
async def wrong_input_in_photobarter(message: types.Message):
    await message.answer("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ *—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é* —Ç–æ–≤–∞—Ä–∞.\n"
                         "–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è üìé –∏ –≤—ã–±—Ä–∞–≤ *–§–æ—Ç–æ*.\n")


@barterpost.message(PostBarter.photo, F.photo)
async def post_photo(message: types.Message, state: FSMContext):
    if message.media_group_id:
        media_group_bufferbarter[message.media_group_id].append(message.photo[-1].file_id)

        if len(media_group_bufferbarter[message.media_group_id]) == 1:
            await asyncio.sleep(1.5)
            photo_ids = media_group_bufferbarter.pop(message.media_group_id)
            data = await state.get_data()
            photos = data.get("photos", [])
            photos.extend(photo_ids)
            await state.update_data(photos=photos)

            await message.answer(
                "üñº –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–∞–ª–µ–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                reply_markup=finish_kb()
            )

    else:
        data = await state.get_data()
        photos = data.get("photos", [])
        photos.append(message.photo[-1].file_id)
        await state.update_data(photos=photos)

        await message.answer(
            "üñº –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–∞–ª–µ–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            reply_markup=finish_kb2()
        )

@barterpost.callback_query(F.data == "finish_post2")
async def handle_finish2(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    photos = data.get("photos", [])
    if not photos:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
        return
    text = (
    f"<i><b>{data['title']}</b></i> \n"
    f"–ì–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–ª–æ–≥–µ—Ä–∞–º–∏ –ø–æ –±–∞—Ä—Ç–µ—Ä—É {data['money']}, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–≤–æ–π –±–ª–æ–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É! \n\n"
    f"<b>‚ùóÔ∏è–í–ê–ñ–ù–û:</b>\n"
    f"<b><i>‚ñ´Ô∏è –°–æ—Ü. —Å–µ—Ç—å. –û—Ö–≤–∞—Ç –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—è: </i></b>\n"
    f"-{data['web']}\n"
    f"- –û—Ö–≤–∞—Ç—ã —Å—Ç–æ—Ä–∏–∑ –∏ —Ä–∏–ª–∑ –æ—Ç {data['ohwats']}\n"
    f"-{data['descriptions']}\n"
    f"üñäÔ∏è <b>–î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ç–∫–ª–∏–∫</b> <i>{data['seller']}</i>"
)
    user_id = callback.from_user.id
    username = callback.from_user.username or ''
    first_name = callback.from_user.first_name or ''
    user_id = callback.from_user.id
    chat = await chat_privat(user_id)
    if user_id not in chat:
        topic_title = f'{username}|{first_name}'
        new_topic = await callback.bot.create_forum_topic(chat_id=CHAT_ID, name=topic_title)
        thread_id = new_topic.message_thread_id
        await callback.bot.send_message(chat_id=CHAT_ID, text=f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (id: {user_id})", message_thread_id=thread_id)

    async with async_session() as session:
            chat_user = await session.scalar(select(ChatPrivatUser).where(ChatPrivatUser.user_id == user_id))
            thread_id = chat_user.thread_id if chat_user else None
    media_group = [types.InputMediaPhoto(media=file_id) for file_id in photos]
    await callback.bot.send_media_group(chat_id=CHAT_ID, media=media_group, message_thread_id=thread_id)

    buttons = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ü–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç", callback_data=f"approve_{user_id}")],
        [types.InlineKeyboardButton(text="‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω", callback_data=f"reject_{user_id}")]
    ])
    await callback.bot.send_message(chat_id=CHAT_ID, text=text, message_thread_id=thread_id, reply_markup=buttons, parse_mode='HTML')
    await state.clear()
    await callback.message.answer("–ì–æ—Ç–æ–≤–æ! –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.", reply_markup=user_kb(callback.from_user.id))


@barterpost.callback_query(F.data.startswith("approve_"))
async def approve_post2(callback: types.CallbackQuery):
    if callback.from_user.id not in admin:
        return
    user_id = int(callback.data.split("_")[1])
    try:
        await callback.bot.send_message(chat_id=user_id, text="‚úÖ –í–∞—à –ø–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å.")
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

@barterpost.callback_query(F.data.startswith("reject_"))
async def reject_post2(callback: types.CallbackQuery):
    if callback.from_user.id not in admin:
        return
    user_id = int(callback.data.split("_")[1])
    try:
        await callback.bot.send_message(chat_id=user_id, text="‚ùå –í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")