from aiogram import Router, F, types
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup

cachbackpost = Router()

class PostCachback(StatesGroup):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–µ—à–±–µ–∫–µ."""

    title = State()
    market = State()
    price_before = State()
    price_after = State()
    discount = State()

@cachbackpost.callback_query(F.data == 'price_cash')
async def start_post(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(PostCachback.title)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=types.ReplyKeyboardRemove())
    await callback.answer()

@cachbackpost.message(PostCachback.title)
async def post_market(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(PostCachback.market)
    await message.answer('–ù–∞ –∫–∞–∫–æ–π –ø–ª–æ—â–∞–¥–∫–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è —Ç–æ–≤–∞—Ä?')

@cachbackpost.message(PostCachback.market)
async def post_price(message: types.Message, state: FSMContext):
    await state.update_data(market=message.text)
    await state.set_state(PostCachback.price_before)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –≤ —Ä—É–±–ª—è—Ö:')

@cachbackpost.message(PostCachback.price_before)
async def post_price_before(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1490):')
        return
    
    await state.update_data(price_before=message.text)
    await state.set_state(PostCachback.price_after)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ —Å —É—á–µ—Ç–æ–º –∫–µ—à–±–µ–∫–∞:')

@cachbackpost.message(PostCachback.price_after)
async def post_price_after(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000):')
        return
    
    await state.update_data(price_after=message.text)
    await state.set_state(PostCachback.discount)
    await message.answer('–ö–∞–∫–∞—è —Å–∫–∏–¥–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö?')

@cachbackpost.message(PostCachback.discount)
async def post_discount(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15):')
        return
    
    await state.update_data(discount=message.text)
    
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å"))
    await message.answer(
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

@cachbackpost.message(PostCachback.discount, F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def finish_post(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    post_text = (
        f"üè∑ {data['title']}\n"
        f"üõí –ü–ª–æ—â–∞–¥–∫–∞: {data['market']}\n"
        f"üíµ –¶–µ–Ω–∞: {data['price_before']} ‚Üí {data['price_after']}\n"
        f"üî• –°–∫–∏–¥–∫–∞: {data['discount']}%\n"
    )
    
    await message.answer(post_text, reply_markup=types.ReplyKeyboardRemove())
    await state.clear()